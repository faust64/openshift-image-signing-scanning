apiVersion: v1
kind: Template
metadata:
  labels:
    type: image-scanning
  annotations:
    description: Jenkins Pipeline for Running OpenSCAP
    tags: scanning,security
  name: image-scanning-pipeline
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}
  labels:
    type: image-scanning
  spec:
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        env:
        - name: IMAGE_TO_SCAN
          value: "${IMAGE_TO_SCAN}"
        - name: SCANNER_IMAGE_NAMESPACE
          value: "${SCANNER_IMAGE_NAMESPACE}"
        - name: SCANNER_IMAGE_NAME
          value: "${SCANNER_IMAGE_NAME}"
        - name: SERVICE_ACCOUNT
          value: "${SERVICE_ACCOUNT}"
        jenkinsfile: |-
          node('master') {

            def defaultNamespace = readFile('/var/run/secrets/kubernetes.io/serviceaccount/namespace').trim()

            env.IMAGE_NAMESPACE = "$SCANNER_IMAGE_NAMESPACE".trim() != "" ? "$SCANNER_IMAGE_NAMESPACE" : defaultNamespace

            env.IMAGE_SIGN_SCANNING_IMAGE = sh (
                script: """
                  set +x
                  oc get is $SCANNER_IMAGE_NAME -n ${env.IMAGE_NAMESPACE} -o jsonpath='{ .status.dockerImageRepository }'
                  
                  """,
                returnStdout: true
            ).trim()
          }

          podTemplate(label: 'image-sign-scan-base-slave', cloud: 'openshift', serviceAccount: "$SERVICE_ACCOUNT", containers: [
          containerTemplate(name: 'image-sign-scan-base', image: "${env.IMAGE_SIGN_SCANNING_IMAGE}", ttyEnabled: true, privileged: true, command: 'cat', resourceRequestMemory: '1Gi'),
          containerTemplate(name: 'jnlp', image: 'docker.io/openshift/jenkins-slave-base-centos7', args: '${computer.jnlpmac} ${computer.name}')
          ],
          volumes: [
              hostPathVolume(
                hostPath: '/var/run/docker.sock',
                mountPath: '/var/run/docker.sock'
              )
          ]) {
          
            node('image-sign-scan-base-slave') {

              container('image-sign-scan-base') {
              
                stage('scan image') {

                  image_result = sh(script: """
                  set +x
                  WORKING_DIR=\$(mktemp -d -t cve-scan-XXXXX)
                  IMAGE_CONTENT=\${WORKING_DIR}/image-content
                  RESULTS=/tmp/results
                  
                  mkdir -p \$IMAGE_CONTENT
        
                  image-inspector --path=\${IMAGE_CONTENT} --scan-results-dir=\${RESULTS} --scan-type=openscap --openscap-html-report --image=$IMAGE_TO_SCAN
                  
                  mv /tmp/results/* ${WORKSPACE}
                
                  rm -rf \${WORKING_DIR}
                  set +e
                  grep "<result>fail</result>" ${WORKSPACE}/results-arf.xml
        
                  RESULT=\$?
                
                  if [ \${RESULT} -ne 0 ]; then
                    exit 0
                  else
                    exit 1
                  fi
                  
                  """, returnStatus: true)
            
                  archiveArtifacts(artifacts: 'results.html')
                  
                  if(image_result != 0) {
                      currentBuild.result = 'FAILURE'
                      error("Image Scanning Failed!")
                  }
                }
              }
            }
          }
parameters:
- description: The Name for the Application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: scan-image
- description: The Namespace Containing the Scanner Image.
  displayName: Scanner Image Namespace
  name: SCANNER_IMAGE_NAMESPACE
  value: image-management
- description: The Name of the Scanner Image
  displayName: Scanner Image Name
  name: SCANNER_IMAGE_NAME
  required: true
  value: image-sign-scan-base
- description: Name of the Image to Scan.
  displayName: Image to Scan
  name: IMAGE_TO_SCAN
  required: true
  value: docker.io/centos:centos7
- description: Name of the Service Account Used to Launch the Slave Pod.
  displayName: Slave Pod Service Account
  name: SERVICE_ACCOUNT
  value: jenkins
  required: true
