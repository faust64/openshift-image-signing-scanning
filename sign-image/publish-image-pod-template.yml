apiVersion: v1
kind: Template
metadata:
  name: publish-image-pod-template
  annotations:
    openshift.io/display-name: Sign and Publish Image
    description: Template to create a Job to Sign an Image (Pod)
objects:
- apiVersion: v1
  kind: Pod
  metadata:
    name: "sign-image-${UNIQUE_VALUE}"
    namespace: "${NAMESPACE}"
  spec:
    containers:
    - env:
        - name: IMAGE
          value: ${IMAGE_TO_SIGN}
        - name: DIGEST
          value: ${IMAGE_DIGEST}
        - name: SIGNBY
          value: ${SIGN_BY}
      name: sign-image
      image: image-sign-scan-base
      command:
        - "/bin/bash"
        - "-c"
        - >
              oc login https://kubernetes.default.svc.cluster.local --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) > /dev/null 2>&1 

              IMAGE_SIGNATURE_EXISTS=$(oc get images ${IMAGE_DIGEST} -o json | jq -r 'has("signatures")')

              if [ "${IMAGE_SIGNATURE_EXISTS}" == "true" ]; then
                echo "Signature exists on image. Skipping signing"
                exit 0
              fi

              SA_FULLNAME=$(oc whoami)

              SA_NAME="${SA_FULLNAME##*:}"

              NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
              SA_JSON=$(oc get sa -n $NAMESPACE $SA_NAME -o json)

              DOCKERCFG_SECRET_NAME=$(echo "${SA_JSON}" | jq -r ".imagePullSecrets[] | select( .name | contains(\"${SA_NAME}-dockercfg\")).name")

              DOCKERCFG=$(oc get secret -n $NAMESPACE $DOCKERCFG_SECRET_NAME -o json | jq -r ".data[] | select(\".dockercfg\")" | base64 -d)

              if [ -z ${IMAGE} ]; then
                echo "No Image Specified for Signing"
                exit 1
              fi

              REGISTRY_HOST=${IMAGE%%/*}
              REGISTRY_CONTENTS=$(echo "$DOCKERCFG" | jq -r ". | .[\"$REGISTRY_HOST\"]")

              if [ "$REGISTRY_CONTENTS" != "null" ]; then

                USERNAME=$(echo $REGISTRY_CONTENTS | jq -r .username)
                PASSWORD=$(echo $REGISTRY_CONTENTS | jq -r .password)

                USERNAME_PARAM="--username $USERNAME"
                PASSWORD_PARAM="--password $PASSWORD"

                docker login -u $USERNAME -p $PASSWORD $REGISTRY_HOST

              fi

              docker pull $IMAGE

              TARGET_IMAGE=$(echo $IMAGE | sed 's|.*/\([^/]*\)$|${TARGET_REGISTRY_HOSTBASE}/\1|')

              docker tag $IMAGE $TARGET_IMAGE

              gpg2 --import /root/gnupg-src/private.asc

              atomic push --insecure --type atomic --sign-by $SIGNBY $TARGET_REGISTRY_USER $TARGET_REGISTRY_PASSWORD $TARGET_IMAGE

              atomic search $TARGET_IMAGE

              atomic sign $TARGET_IMAGE

              docker rmi -f $IMAGE
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket
        - mountPath: /root/gnupg-src
          name: gpg
    volumes:
      - name: gpg
        secret:
          secretName: ${GPG_SECRET}
      - hostPath:
          path: /var/run/docker.sock
        name: docker-socket
    restartPolicy: Never
    serviceAccount: ${SERVICE_ACCOUNT_NAME}
    tolerations:
    - key: image_management
      operator: Equal
      value: "true"
      effect: NoExecute
parameters:
- name: TARGET_REGISTRY_HOSTBASE
  value: nexus:8081/docker-hosted
- name: TARGET_REGISTRY_USER
  value: openshift
- name: TARGET_REGISTRY_PASSWORD
  value: secret
- name: SERVICE_ACCOUNT_NAME
  displayName: Service Account Name
  description: Name of the service account to Run the Job As
  value: imagemanager
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: Namespace to Run the Job Within
  value: image-management
  required: true
- name: IMAGE_TO_SIGN
  displayName: Image to Sign
  description: Image to Sign
  required: true
- name: IMAGE_DIGEST
  displayName: Image Digest
  description: Image Digest
  required: true
- name: SIGN_BY
  displayName: Sign By
  description: Identity of the Signer
  required: true
- name: GPG_SECRET
  displayName: GPG Secret
  description: Name of the Secret Containing GPG Keys
  value: "gpg"
  required: true
- name: NODE_SELECTOR_KEY
  displayName: Node Selector Key
  description: Node Selector Key for the Job
  value: "image_management"
  required: true
- name: NODE_SELECTOR_VALUE
  displayName: Node Selector Value
  description: Node Selector Value for the Job
  value: "true"
  required: true
- name: UNIQUE_VALUE  
  generate: expression
  from: "[a-z0-9]{5}"
  required: true
