---

- include: epel.yml

- name: enable epel
  changed_when: False
  shell: yum-config-manager --enable "Extra Packages for Enterprise Linux 7 - x86_64"
- name: Install GPG Dependencies
  become: true
  package: name="{{ item }}" state=latest
  with_items:
  - gnupg2
  - rng-tools
  - haveged
- name: disable epel
  changed_when: False
  shell: yum-config-manager --disable "Extra Packages for Enterprise Linux 7 - x86_64"

- name: Enable haveged
  become: true
  service:
    name: haveged
    state: started
- name: Create GPG Home Directory
  file:
    state: directory
    mode: 0700
    dest: "{{ gpg_home }}/.gnupg"

- name: Set gpg pinentry mode to loopback in config file.
  lineinfile:
    dest: "{{ gpg_home }}/.gnupg/gpg.conf"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    mode: 0600
    create: yes
  with_items:
  - line: "use-agent"
    regexp: "^use-agent"
  - line: "pinentry-mode loopback"
    regexp: "^pinentry-mode"

- name: Set gpg-agent config file to allow loopback pinentry.
  lineinfile:
    dest: "{{ gpg_home }}/.gnupg/gpg-agent.conf"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    mode: 0600
    create: yes
  with_items:
  - line: "allow-loopback-pinentry"
    regexp: "^allow-loopback-pinentry"

- name: Copy GPG Configuration File
  copy:
   src: gpg.conf
   dest: "{{ gpg_home }}/.gnupg/gpg.conf"
   mode: 0600

- name: Generate GPG Template
  template:
    src: gpg-generate.j2
    dest: "{{ gpg_home }}/gen-key-script-openshift"
    mode: 0600


- name: Check existing secret key
  changed_when: False
  environment:
    GNUPGHOME: "{{ gpg_home }}/.gnupg"
  failed_when: False
  register: gpgkeys
  shell: "gpg2 --list-secret-keys 2>/dev/null | grep '{{ gpg_key_gen_uid }}'"

- name: Generate gpg key
  environment:
    GNUPGHOME: "{{ gpg_home }}/.gnupg"
  register: genkey
  shell: "gpg2 --batch --gen-key {{ gpg_home }}/gen-key-script-openshift chdir={{ gpg_home }}"
  when: gpgkeys is defined and gpgkeys.stdout == ""

- name: Export Public Key
  environment:
    GNUPGHOME: "{{ gpg_home }}/.gnupg"
  shell: "gpg2 --batch --yes --armor --export --output {{ gpg_home }}/{{ gpg_key_gen_user_email }} {{ gpg_key_gen_user_email }} chdir={{ gpg_home }}"

- name: Export Private Key
  environment:
    GNUPGHOME: "{{ gpg_home }}/.gnupg"
  shell: "gpg2 --export-secret-keys -a {{ gpg_key_gen_user_email }} >private.asc chdir={{ gpg_home }}/.gnupg creates={{ gpg_home }}/.gnupg/private.asc"

- name: Delete local folder
  delegate_to: localhost
  file: state=absent path="{{ gpg_local_base_dir }}"
  
- name: Create Local Folders for GPG Content
  delegate_to: localhost
  file: state=directory path="{{ item }}"
  with_items:
  - "{{ gpg_core_files_dir }}"
  - "{{ gpg_publickey_dir }}"

- name: Fetch GPG Files
  fetch: src="{{ item }}" dest="{{ gpg_core_files_dir }}/" flat=true
  with_items:
  - "{{ gpg_home }}/.gnupg/pubring.gpg"
  - "{{ gpg_home }}/.gnupg/secring.gpg"
  - "{{ gpg_home }}/.gnupg/trustdb.gpg"
  - "{{ gpg_home }}/.gnupg/private.asc"
  
- name: Fetch GPG Public Key
  fetch: src="{{ item }}" dest="{{ gpg_publickey_dir }}/" flat=true
  with_items:
  - "{{ gpg_home }}/{{ gpg_key_gen_user_email }}"

- name: Delete GPG Directory
  file: state=absent path="{{ gpg_home }}"
